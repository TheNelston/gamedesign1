import shutil
import string
import copy
import pygame
import time
from bresenham import bresenham

class base(object):
	hp = 1000
	mark = "#"
	dmg = 0

class unit(object):
	hp = 50
	mark = "x"
	cost = 25
	dmg = 25
	att = False
	spd = 5
	move = False
	rge = 2

class Uhpdmg:
	uhpdmg = [unit.hp,unit.dmg]

class P1:
	mins = 200
	unitlist = []
	unitcoords = []
	unitatt = []
	unitmove = []

class P2():
	mins = 200
	unitlist = []
	unitcoords = []
	unitatt = []
	unitmove = []

removepunct = str.maketrans('', '', string.punctuation)
removespace = str.maketrans('', '', string.whitespace)
columns = shutil.get_terminal_size().columns
gameboard = [["="*103],['a', '||'], ['b', '||'], ['c', '||'], ['d', '||'], ['e', '||'], ['f', '||'], ['g', '||'], ['h', '||'], ['i', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'], ['j', '||'], ['k', '||'], ['l', '||'], ['m', '||'], ['n', '||'], ['o', '||'], ['p', '||'], ['q', '||'], ['r', '||'], ['s', '||'], ['t', '||'], ['u', '||'], ['v', '||'], ['w', '||'], ['x', '||'], ['y', '||'],["="*103],[" 0000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999"],[" 0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"]]
letcoords = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y']
letnum = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
numcoords = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99']
numnum = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101]
letd = dict(zip(letcoords,letnum))
numd = dict(zip(numcoords,numnum))
rletd = dict(zip(letnum,letcoords))
rnumd = dict(zip(numnum,numcoords))

(gameboard[letd["n"]])[numd['00']] = "B"
((gameboard[letd[rletd[letd["n"]+1]]])[numd['00']]) = "B"
(gameboard[letd["n"]])[numd["01"]] = "B"
((gameboard[letd[rletd[letd["n"]+1]]])[numd["01"]]) = "B"
(gameboard[letd["n"]])[numd["02"]] = "B"
((gameboard[letd[rletd[letd["n"]+1]]])[numd["02"]]) = base.mark
for element in gameboard:
	print(("".join(element)).center(columns))

def attack():
	print("What unit would you like to attack with?".center(columns))
	newinputted = input("> ").translate(removespace).translate(removepunct).lower()
	index = P1.unitcoords.index([letd[newinputted[2]],numd[newinputted[0:2]]])
	if [letd[newinputted[2]],numd[newinputted[0:2]]] in P1.unitcoords:
		if P1.unitatt[index] == False:	
			print("Where would you like to attack?".center(columns))
			print("Your current unit range is: {}".format(unit.rge).center(columns))
			inputted = input("> ").translate(removespace).translate(removepunct).lower()
			if abs((P1.unitcoords[index])[0]-letd[inputted[2]]) <= unit.rge and abs((P1.unitcoords[index])[1]-numd[inputted[0:2]]) <= unit.rge or (((((P1.unitcoords[index])[0]-letd[inputted[2]])**2)+(((P1.unitcoords[index])[1]-numd[inputted[0:2]])**2))**0.5) <= unit.rge:	
				if (gameboard[letd[inputted[2]]])[numd[inputted[0:2]]] == base.mark:
					base.hp -= (P1.unitlist[newinputted])[1]
					print("Enemy base now has {} hp".format(base.hp).center(columns))
					(P1.unitlist[newinputted])[0] -= base.dmg
					P1.unitatt[index] = True
				elif (gameboard[letd[inputted[2]]])[numd[inputted[0:2]]] == unit.mark:
					 -= 
					 -= 
					print("Enemy unit now has {} hp".format()
					P1.unitatt[index] = True
				else:
					print("You can't attack that!")
			else:
				print("Too far away to attack that!".center(columns))
		else:
			print("That unit has already attacked!".center(columns))	
	else:
		print("You don't have a unit there!".center(columns))

def units():
	if P1.mins >= unit.cost:
		print("Where would you like to place your unit?".center(columns))
		inputted = input("> ").translate(removespace).translate(removepunct).lower()
		if (int("{}".format(numd[inputted[0:2]]))) <= 27:
			if (gameboard[letd[inputted[2]]])[numd[inputted[0:2]]].isalpha() != True:
				(gameboard[letd[inputted[2]]])[numd[inputted[0:2]]] = unit.mark
				P1.unitlist.append(Uhpdmg.uhpdmg)
				P1.unitcoords.append([letd[inputted[2]],numd[inputted[0:2]]])
				P1.unitmove.append(unit.move)
				P1.unitatt.append(unit.att)
				P1.mins -= unit.cost
				for element in gameboard:
					print(("".join(element)).center(columns))
			else:
				print("You can't put that there!".center(columns))
		else:
			print("You can't put that there!".center(columns))
		
	else:
		print("You don't have enough minerals for that!".center(columns))

def gameupdates():
	for units in P1.unitlist:
		if units[0] <= unit.hp/2:
			units[1] = unit.dmg-(unit.dmg//3)
	for units in P1.unitlist:
		if units[0] <= 0:
			print("A unit died!")
			P1.unitlist.remove(units)
			P1.unitcoords.remove(unitcoords[P1.unitlist.index(units)])
			P1.unitatt.remove(unitatt[P1.unitlist.index(units)])
			P1.unitmove.remove(unitmove[P1.unitlist.index(units)])
			time.sleep(0.1)
			pygame.display.set_mode((1,1))
			pygame.mixer.music.load("oof.mp3")
			pygame.mixer.music.play()
			clock = pygame.time.Clock()
			clock.tick(10)
			while pygame.mixer.music.get_busy():
			    pygame.event.poll()
			    clock.tick(10)

def move():
	print("")
	print("Which unit would you like to move?".center(columns))
	print("Your current unit speed is: {}".format(unit.spd).center(columns))
	inputted = input("> ").translate(removespace).translate(removepunct).lower()
	index = P1.unitcoords.index([letd[inputted[2]],numd[inputted[0:2]]])
	if P1.unitmove[index] == False:
		if [letd[inputted[2]],numd[inputted[0:2]]] in P1.unitcoords:	
			print("Where would you like to move this unit?".center(columns))
			newinputted = input("> ").translate(removespace).translate(removepunct).lower()
			if abs(letd[inputted[2]]-letd[newinputted[2]]) <= unit.spd and abs(numd[inputted[0:2]]-numd[newinputted[0:2]]) <= unit.spd or ((((letd[inputted[2]]-letd[newinputted[2]])**2)+((numd[inputted[0:2]]-numd[newinputted[0:2]])**2))**0.5) <= unit.spd: 
				(gameboard[letd[newinputted[2]]])[numd[newinputted[0:2]]] = unit.mark
				(gameboard[letd[inputted[2]]])[numd[inputted[0:2]]] = " "
				P1.unitcoords[index] = [letd[newinputted[2]],numd[newinputted[0:2]]]
				P1.unitmove[index] = True
				for element in gameboard:
					print(("".join(element)).center(columns))
			else:
				print("Too far away to attack!".center(columns))
		else:
			print("There's no unit there!".center(columns))
	else:
		print("You can't move that unit again this turn!".center(columns))
gameupdates()
i = 0
while i == i:
	inputted = input("> ")
	if inputted == "a":
		attack()
	elif inputted == "u":
		units()
	elif inputted == "m":
		move()
	elif inputted == "done":
		break
	else:
		(print("no!"))
		i += 1
print("")
print("Here is your board".center(columns))
for element in gameboard:
	print(("".join(element)).center(columns))
print(P1.unitlist)
print(P1.unitcoords)